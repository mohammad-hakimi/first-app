{"version":3,"sources":["logo.svg","drawable/Bouncy-Preloader.gif","components/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","className","item","name","onClick","updateItem","deleteItem","App","state","newTodo","updatingTodo","id","todos","editing","notification","loading","apiUrl","handleChange","bind","alert","handleButtonClick","axios","get","this","response","setTimeout","setState","data","event","target","value","index","delete","post","push","put","src","logo","alt","loadingGif","type","onChange","placeholder","disabled","map","key","then","r","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ccef7c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bouncy-Preloader.4e80f869.gif\";","import React from 'react';\r\n\r\n\r\nconst ListItems = (props) => {\r\n    return <li  className=\"list-group-item\">{props.item.name}\r\n        <button className=\"ml-3 btn-sm btn btn-info\" onClick={props.updateItem}>U</button>\r\n        <button className=\"mx-3 btn-sm btn btn-danger\" onClick={props.deleteItem}>X</button>\r\n    </li>;\r\n}\r\n\r\n\r\nexport default ListItems;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from \"./components/ListItems\";\nimport loadingGif from \"./drawable/Bouncy-Preloader.gif\"\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newTodo: '',\n            updatingTodo: {id: 0, name: ''},\n            todos: [],\n            editing: false,\n            notification: null,\n            loading: true\n        }\n\n        this.apiUrl = `https://5f7c46c200bd74001690a8c7.mockapi.io`;\n\n        this.handleChange = this.handleChange.bind(this);\n        this.alert = this.alert.bind(this);\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.updateItem = this.updateItem.bind(this);\n    }\n\n    async componentDidMount() {\n        const response = await axios.get(`${this.apiUrl}/todos`);\n        setTimeout(() => {\n\n            this.setState({\n                todos: response.data,\n                loading: false\n            });\n        }, 2000);\n    }\n\n    handleChange(event) {\n        this.setState({\n            newTodo: event.target.value\n        });\n    }\n\n    async deleteItem(index) {\n        this.setState({loading: true});\n        const todos = this.state.todos;\n        await axios.delete(`${this.apiUrl}/todos/${todos[index].id}`);\n        delete todos[index];\n        this.setState({\n            todos,\n            loading: false\n        });\n        this.alert(\"Todo deleted successfully.\");\n    }\n\n    async updateItem(index) {\n        const updatingTodo = this.state.todos[index];\n        this.setState({\n            editing: true,\n            updatingTodo: updatingTodo,\n            newTodo: updatingTodo.name\n        });\n    }\n\n    async handleButtonClick() {\n        if (!this.state.editing) {\n            if (this.state.newTodo !== ('')) {\n                this.setState({loading: true});\n                const response = await axios.post(`${this.apiUrl}/todos`, {name: this.state.newTodo});\n                const todos = this.state.todos;\n                todos.push(response.data);\n                this.setState({\n                    todos,\n                    newTodo: '',\n                    loading: false\n                })\n                this.alert(\"Todo added successfully.\");\n            }\n        } else {\n\n            const newTodo = {name: this.state.newTodo, id: this.state.updatingTodo.id};\n            let todos = this.state.todos;\n            this.setState({loading: true});\n            todos[newTodo.id - 1] = newTodo;\n            await axios.put(`${this.apiUrl}/todos/${newTodo.id}`, newTodo);\n            this.setState({\n                editing: false,\n                todos,\n                newTodo: '',\n                loading: false\n            });\n            this.alert(\"Todo edited successfully.\");\n\n        }\n    }\n\n    alert(notification) {\n        this.setState({\n            notification\n        });\n\n        setTimeout(() => {\n            this.setState({notification: null});\n        }, 3000);\n\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 className=\"App-title\">CRUD APP</h1>\n                </header>\n                {\n                    this.state.notification &&\n                    <div className=\"alert mt-3 mx-5 alert-danger\">\n                        <p>{this.state.notification}</p>\n                    </div>\n                }\n                {\n                    this.state.loading &&\n                    <img src={loadingGif} className=\"w-50\" alt=\"\"/>\n                }\n                {\n                    !this.state.loading &&\n                    <div className=\"container\">\n                        <input type=\"text\" className=\"my-4 form-control\" value={this.state.newTodo}\n                               onChange={this.handleChange}\n                               placeholder={this.state.editing ? \"Update To Do...\" : \"New To Do...\"}/>\n                        <button className=\"mb-4 btn-info form-control\" disabled={!this.state.newTodo}\n                                onClick={this.handleButtonClick}>{this.state.editing ? \"EDIT TO DO\" : \"ADD TO DO\"}</button>\n                        <ul className=\"list-group\">\n                            {this.state.todos.map((item, index) => {\n                                if (!this.state.editing) {\n                                    return <ListItems\n                                        key={item.id}\n                                        item={item}\n                                        updateItem={() => {\n                                            this.updateItem(index).then(r => r)\n                                        }}\n                                        deleteItem={() => {\n                                            this.deleteItem(index).then(r => r)\n                                        }}/>\n                                } else {\n                                    return null;\n                                }\n                            })}\n\n                        </ul>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}